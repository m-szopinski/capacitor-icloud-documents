{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ICloudDocsPlugin } from './definitions';\n\nimport '@browserfs/core';\nimport '@browserfs/dom';\n\nconst bfs = require('@browserfs/core');\nconst bfs_dom = require('@browserfs/dom');\n\n// import {\n//   initialize,\n\n// } from '@browserfs/core/emulation/shared'\n\nexport class ICloudDocsWeb extends WebPlugin implements ICloudDocsPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async readFile(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read iCloud file', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.readFile(options.filePath, 'utf-8', (err, content: any) => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          fileStream: content,\n        });\n      });\n    });\n  }\n  async readFileB64(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read Base64 iCloud file', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.readFile(options.filePath, (err, content) => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          fileStream: content?.toString() || '',\n        });\n      });\n    });\n  }\n  async removeFile(options: {\n    filePath: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Remove iCloud file', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.unlink(options.filePath, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          result: 'OK',\n          url: options.filePath,\n        });\n      });\n    });\n  }\n  async writeFile(options: {\n    filePath: string;\n    data: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Write iCloud file', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.writeFile(options.filePath, options.data, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          result: 'OK',\n          url: options.filePath,\n        });\n      });\n    });\n  }\n  async fileExist(options: { path: string }): Promise<{ result: boolean }> {\n    console.log('Check if iCloud file exist', options);\n    return new Promise(resolve => {\n      bfs.fs.exists(options.path, exist => {\n        resolve({\n          result: exist,\n        });\n      });\n    });\n  }\n  async mkdir(options: {\n    path: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Create iCloud directory', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.mkdir(options.path, undefined, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          result: 'OK',\n          url: options.path,\n        });\n      });\n    });\n  }\n  async stat(options: { path: string }): Promise<{\n    type: 'Directory' | 'File';\n    size: number;\n    modificationDate: string;\n    creationDate: string;\n  }> {\n    console.log('Stat of iCloud file', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.stat(options.path, (err, result) => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          type: result!.isDirectory() ? 'Directory' : 'File',\n          size: result!.size,\n          modificationDate: result?.mtime.toString() || new Date().toString(),\n          creationDate: result?.ctime.toString() || new Date().toString(),\n        });\n      });\n    });\n  }\n  async readdir(options: { path: string }): Promise<{ result: string[] }> {\n    console.log('List iCloud files', options);\n    return new Promise((resolve, reject) => {\n      bfs.fs.readdir(options.path, (err, result) => {\n        if (err) {\n          reject(err);\n        }\n        resolve({\n          result: result || [],\n        });\n      });\n    });\n  }\n  async initUbiquitousContainer(): Promise<void> {\n    console.log('Init iCloud container');\n    bfs.registerBackend(bfs_dom.StorageFileSystem as any);\n    return bfs.configure({ '/': 'Storage' });\n  }\n  async syncToCloud(options: {\n    filePath: string;\n    destinationFolder: string;\n  }): Promise<{ url: string }> {\n    console.log('Sync iCloud file', options);\n    return { url: '' };\n  }\n}\n"]}