{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,aAAc,SAAQ,SAAS;IAC1C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,OAEd;QACC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACzC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,WAAW,CAAC,OAEjB;QACC,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,OAEhB;QACC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,SAAS,CAAC,OAGf;QACC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,SAAS,CAAC,OAAyB;QACvC,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QACnD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAC3B,CAAC;IACD,KAAK,CAAC,KAAK,CAAC,OAAyB;QACnC,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,IAAI,CAAC,OAAyB;QAMlC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAC5C,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC;IAC3E,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,OAAyB;QACrC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;QAC1C,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;IACxB,CAAC;IACD,KAAK,CAAC,uBAAuB;QAC3B,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACvC,CAAC;IACD,KAAK,CAAC,WAAW,CAAC,OAGjB;QACC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACzC,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACrB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ICloudDocsPlugin } from './definitions';\n\nexport class ICloudDocsWeb extends WebPlugin implements ICloudDocsPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async readFile(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read iCloud file', options);\n    return { fileStream: 'OK' };\n  }\n  async readFileB64(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read Base64 iCloud file', options);\n    return { fileStream: 'OK' };\n  }\n  async removeFile(options: {\n    filePath: string;\n  }): Promise<{ result: string; url: '' }> {\n    console.log('Remove iCloud file', options);\n    return { result: 'OK', url: '' };\n  }\n  async writeFile(options: {\n    filePath: string;\n    data: string;\n  }): Promise<{ result: string; url: '' }> {\n    console.log('Remove iCloud file', options);\n    return { result: 'OK', url: '' };\n  }\n  async fileExist(options: { path: string }): Promise<{ result: boolean }> {\n    console.log('Check if iCloud file exist', options);\n    return { result: false };\n  }\n  async mkdir(options: { path: string }): Promise<{ result: string; url: '' }> {\n    console.log('Create iCloud directory', options);\n    return { result: 'OK', url: '' };\n  }\n  async stat(options: { path: string }): Promise<{\n    type: 'Directory' | 'File';\n    size: number;\n    modificationDate: string;\n    creationDate: string;\n  }> {\n    console.log('Stat of iCloud file', options);\n    return { type: 'File', size: 0, modificationDate: '', creationDate: '' };\n  }\n  async readdir(options: { path: string }): Promise<{ result: string[] }> {\n    console.log('List iCloud files', options);\n    return { result: [] };\n  }\n  async initUbiquitousContainer(): Promise<void> {\n    console.log('Init iCloud container');\n  }\n  async syncToCloud(options: {\n    filePath: string;\n    destinationFolder: string;\n  }): Promise<{ url: string }> {\n    console.log('Sync iCloud file', options);\n    return { url: '' };\n  }\n}\n"]}