{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ICloudDocsPlugin } from './definitions';\n\nimport fs from 'indexeddb-fs';\n\n\nexport class ICloudDocsWeb extends WebPlugin implements ICloudDocsPlugin {\n\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async readFile(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read iCloud file', options);\n    return fs.readFile(options.filePath).then((res) => {\n      return {\n        fileStream: res as string\n      }\n    });\n  }\n  async readFileB64(options: {\n    filePath: string;\n  }): Promise<{ fileStream: string }> {\n    console.log('Read Base64 iCloud file', options);\n    return fs.readFile(options.filePath).then((res) => {\n      return {\n        fileStream: res as string\n      }\n    });\n  }\n  async removeFile(options: {\n    filePath: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Remove iCloud file', options);\n    return fs.removeFile(options.filePath).then(() => {\n      return {\n        result: 'OK',\n        url: options.filePath\n      }\n    });\n  }\n  async writeFile(options: {\n    filePath: string;\n    data: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Write iCloud file', options);\n    return fs.writeFile(options.filePath, options.data).then(() => {\n      return {\n        result: 'OK',\n        url: options.filePath\n      }\n    });\n  }\n  async fileExist(options: { path: string }): Promise<{ result: boolean }> {\n    console.log('Check if iCloud file exist', options);\n    return fs.exists(options.path).then((res) => {\n      return {\n        result: res,\n      }\n    });\n  }\n  async mkdir(options: {\n    path: string;\n  }): Promise<{ result: string; url: string }> {\n    console.log('Create iCloud directory', options);\n    return fs.createDirectory(options.path).then(() => {\n      return {\n        result: 'OK',\n        url: options.path\n      }\n    });\n  }\n  async stat(options: { path: string }): Promise<{\n    type: 'Directory' | 'File';\n    size: number;\n    modificationDate: string;\n    creationDate: string;\n  }> {\n    console.log('Stat of iCloud file', options);\n    return fs.details(options.path).then((res) => {\n      return {\n        type: res.directory ? 'Directory' : 'File',\n        size: 0,\n        modificationDate: res.createdAt.toString(),\n        creationDate: res.createdAt.toString()\n      }\n    });\n  }\n  async readdir(options: { path: string }): Promise<{ result: string[] }> {\n    console.log('List iCloud files', options);\n    return fs.readDirectory(options.path).then((res) => {\n      return {\n        result: [...res.directories.map((d) => d.name), ...res.files.map((f) => f.name)]\n      }\n    });\n  }\n  async initUbiquitousContainer(): Promise<void> {\n    console.log('Init iCloud container');\n    return new Promise((resolve) => {\n      resolve();\n    })\n    \n  }\n  async syncToCloud(options: {\n    filePath: string;\n    destinationFolder: string;\n  }): Promise<{ url: string }> {\n    console.log('Sync iCloud file', options);\n    return { url: '' };\n  }\n}\n"]}